apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ingress-node-firewall-daemon
  namespace: '{{.NameSpace}}'
spec:
  selector:
    matchLabels:
      app: ingress-node-firewall-daemon
    updateStrategy:
      type: RollingUpdate
  template:
    metadata:
      labels:
        app: ingress-node-firewall-daemon
        component: daemon
        type: infra
    spec:
      hostNetwork: true
      hostPID: true
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      priorityClassName: "system-node-critical"
      containers:
        - name: daemon
          image: '{{.Image}}'
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POLL_PERIOD_SECONDS
              value: "30"
          securityContext:
            privileged: true
            runAsUser: 0
            capabilities:
              add:
                - CAP_BPF
                - CAP_NET_ADMIN
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - name: bpf-maps
              mountPath: /sys/fs/bpf
              mountPropagation: Bidirectional
            - name: syslog-socket
              mountPath: /var/run
        - name: events
          image: '{{.Image}}'
          command: ["/usr/bin/syslog"]
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: syslog-socket
              mountPath: /var/run
        - name: kube-rbac-proxy
          image: '{{.RBACProxyImage}}'
          command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              set -euo pipefail
              TLS_PK=/etc/pki/tls/metrics-certs/tls.key
              TLS_CERT=/etc/pki/tls/metrics-certs/tls.crt
              # As the secret mount is optional we must wait for the files to be present.
              # If it isn't created there is probably an issue so we want to crashloop.
              TS=$(date +%s)
              WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
              HAS_LOGGED_INFO=0
              log_missing_certs(){
                  CUR_TS=$(date +%s)
                  if [[ "${CUR_TS}" -gt "${WARN_TS}"  ]]; then
                    echo $(date -Iseconds) WARN: ingress-node-firewall-daemon-metrics-certs not mounted after 20 minutes.
                  elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
                    echo $(date -Iseconds) INFO: ingress-node-firewall-daemon-metrics-certs not mounted. Waiting 20 minutes.
                    HAS_LOGGED_INFO=1
                  fi
              }
              while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
                log_missing_certs
                sleep 5
              done
              echo $(date -Iseconds) INFO: ingress-node-firewall-daemon-metrics-certs mounted, starting kube-rbac-proxy
              exec /usr/bin/kube-rbac-proxy --secure-listen-address=:9301 \
                --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
                --upstream=http://127.0.0.1:39301 \
                --tls-private-key-file=${TLS_PK} \
                --tls-cert-file=${TLS_CERT}
          ports:
            - containerPort: 9301
              name: https
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - name: ingress-node-firewall-daemon-metrics-certs
              mountPath: /etc/pki/tls/metrics-certs
              readOnly: True
      volumes:
        - name: bpf-maps
          hostPath:
            path: /sys/fs/bpf
            type: DirectoryOrCreate
        # Must be optional because the ingress-node-firewall-daemon-metrics-certs is a service serving
        # certificate and those cannot be generated without the daemon running
        - name: ingress-node-firewall-daemon-metrics-certs
          secret:
            secretName: ingress-node-firewall-daemon-metrics-certs
            optional: true
        - name: syslog-socket
          path: /var/run
      serviceAccountName: ingress-node-firewall-daemon
